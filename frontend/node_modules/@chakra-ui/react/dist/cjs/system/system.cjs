'use client';
'use strict';

var styledSystem = require('@chakra-ui/styled-system');
var assignAfter = require('@chakra-ui/utils/assign-after');
var compact = require('@chakra-ui/utils/compact');
var interopDefault = require('@chakra-ui/utils/interop-default');
var runIfFn = require('@chakra-ui/utils/run-if-fn');
var splitProps = require('@chakra-ui/utils/split-props');
var createStyled = require('@emotion/styled');
var react = require('react');
var shouldForwardProp = require('./should-forward-prop.cjs');
var colorModeContext = require('../color-mode/color-mode-context.cjs');

const emotion_styled = interopDefault.interopDefault(createStyled);
const toCSSObject = ({ baseStyle }) => (props) => {
  const { theme, css: cssProp, __css, sx, ...restProps } = props;
  const isStyleProp = styledSystem.isStylePropFn(theme);
  const [styleProps] = splitProps.splitProps(restProps, isStyleProp);
  const finalBaseStyle = runIfFn.runIfFn(baseStyle, props);
  const finalStyles = assignAfter.assignAfter(
    {},
    __css,
    finalBaseStyle,
    compact.compact(styleProps),
    sx
  );
  const computedCSS = styledSystem.css(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled(component, options) {
  const { baseStyle, ...styledOptions } = options ?? {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp.shouldForwardProp;
  }
  const styleObject = toCSSObject({ baseStyle });
  const Component = emotion_styled(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = react.forwardRef(
    function ChakraComponent2(props, ref) {
      const { children, ...restProps } = props;
      const { colorMode, forced } = colorModeContext.useColorMode();
      const dataTheme = forced ? colorMode : void 0;
      return react.createElement(
        Component,
        { ref, "data-theme": dataTheme, ...restProps },
        children
      );
    }
  );
  return chakraComponent;
}

exports.styled = styled;
exports.toCSSObject = toCSSObject;
